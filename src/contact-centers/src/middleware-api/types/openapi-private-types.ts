/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/contactCenter/v1/agents/availability': {
    get: operations['checkAgentAvailability'];
  };
  '/contactCenter/v1/agents/waitTime': {
    get: operations['agentWaitTime'];
  };
  '/contactCenter/v1/conversations/{conversationId}/end': {
    post: operations['sendEnd'];
  };
  '/contactCenter/v1/conversations/{conversationId}/escalate': {
    post: operations['escalateToAgent'];
  };
  '/contactCenter/v1/conversations/{conversationId}/messages/{messageId}': {
    put: operations['sendMessage'];
  };
  '/contactCenter/v1/conversations/{conversationId}/type': {
    post: operations['sendTypingIndicator'];
  };
  '/contactCenter/v1/settings/all': {
    get: operations['listSettings'];
  };
  '/contactCenter/v2/integrations': {
    get: operations['listIntegrations'];
  };
}

export interface components {
  schemas: {
    AgentAvailability: {
      available: boolean;
      /** Estimated wait time in seconds */
      estimatedWaitTime?: number;
      /** Represents when a program is open or closed */
      hoursOfOperation?: boolean;
      /** Number of chats waiting in the queue. */
      queueDepth?: number;
      /** Indicates whether there is an active agent with a chat slot available (online), there are agents logged in, but all their chat slots are full (busy), or all agents on a busy status or are not logged in (offline). */
      status?: string;
    };
    BadRequest: {
      errors: components['schemas']['Error'][];
      message: string;
    };
    End: {
      escalationId?: string;
      senderId: string;
    };
    Error: {
      message: string;
      source: string;
      type: string;
    };
    Escalate: {
      skill: string;
      userId: string;
    };
    EscalateResponse: {
      agentId?: string;
      escalationId: string;
      /** Estimated wait time in seconds */
      estimatedWaitTime?: number;
      /** The user position in the chat queue. */
      queuePosition?: number;
      /** (accepted, queued) */
      status?: string;
    };
    InternalError: {
      message: string;
    };
    Message: {
      content: string;
      escalationId?: string;
      /** The user or agent ID */
      senderId: string;
      /** Who is sending the message (agent or user) */
      side: string;
    };
    SettingCore: {
      integrationFields: { [key: string]: unknown };
      integrationName: string;
    };
    SettingCoreList: {
      integrations: components['schemas']['SettingCore'][];
    };
    Typing: {
      escalationId?: string;
      typing: boolean;
    };
    WaitTime: {
      /** Estimated wait time in seconds */
      estimatedWaitTime: number;
    };
  };
  responses: {};
}

export interface operations {
  checkAgentAvailability: {
    parameters: {
      query: {
        /** The Skill name to check agent availability (Optional) */
        skill?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['AgentAvailability'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  agentWaitTime: {
    parameters: {
      query: {
        /** The Skill name to check the wait time (Optional) */
        skill?: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['WaitTime'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  sendEnd: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** End conversation object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['End'];
      };
    };
  };
  escalateToAgent: {
    parameters: {
      path: {
        /** The Conversation ID */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      201: {
        content: {
          'application/json': components['schemas']['EscalateResponse'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Escalate object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['Escalate'];
      };
    };
  };
  sendMessage: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
        /** Used for don't send duplicate messages. */
        messageId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Message object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['Message'];
      };
    };
  };
  sendTypingIndicator: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Typing Indicator object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['Typing'];
      };
    };
  };
  listSettings: {
    parameters: {};
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SettingCoreList'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  listIntegrations: {
    parameters: {
      header: {
        'X-Pypestream-Customer-Id': string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SettingCoreList'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
}

export interface external {}
/* eslint-enable */
