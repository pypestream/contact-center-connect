/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/contactCenter/v1/conversations/{conversationId}/end': {
    post: operations['sendEnd'];
  };
  '/contactCenter/v1/conversations/{conversationId}/history': {
    get: operations['conversationHistory'];
  };
  '/contactCenter/v1/conversations/{conversationId}/messages/{messageId}': {
    put: operations['sendMessage'];
  };
  '/contactCenter/v1/conversations/{conversationId}/metadata': {
    get: operations['conversationMetadata'];
  };
  '/contactCenter/v1/conversations/{conversationId}/type': {
    post: operations['sendTypingIndicator'];
  };
  '/contactCenter/v1/settings': {
    get: operations['getSettings'];
    put: operations['setSettings'];
  };
  '/contactCenter/v2/conversations/{conversationId}/history': {
    get: operations['conversationHistoryV2'];
  };
  '/contactCenter/v2/integrations': {
    get: operations['listIntegrations'];
    post: operations['createIntegration'];
  };
  '/contactCenter/v2/integrations/{integrationId}': {
    get: operations['getIntegration'];
    put: operations['updateIntegration'];
    delete: operations['deleteIntegration'];
    patch: operations['patchIntegration'];
  };
}

export interface components {
  schemas: {
    BadRequest: {
      errors: components['schemas']['Error'][];
      message: string;
    };
    End: {
      senderId: string;
    };
    Error: {
      message: string;
      source: string;
      type: string;
    };
    History: {
      messages: components['schemas']['MessageSent'][];
      pagination: {
        page: number;
        totalPages: number;
      };
    };
    HistoryMessage: {
      content: { [key: string]: unknown };
      id: string;
      /** The user or agent ID */
      senderId: string;
      sentDate: string;
      /** Who is sending the message (agent or user) */
      side: string;
      /** Message type(text, image, button, etc) */
      type: string;
    };
    HistoryV2: {
      messages: components['schemas']['HistoryMessage'][];
      pagination: {
        page: number;
        totalPages: number;
      };
    };
    Integration: {
      callbackToken: string;
      callbackURL: string;
      id: string;
      integrationFields: { [key: string]: unknown };
      integrationName: string;
    };
    IntegrationCreate: {
      callbackToken: string;
      callbackURL: string;
      integrationFields: { [key: string]: unknown };
      integrationName: string;
    };
    IntegrationList: {
      integrations: components['schemas']['Integration'][];
    };
    IntegrationPatch: {
      callbackToken?: string;
      callbackURL?: string;
      integrationFields?: { [key: string]: unknown };
      integrationName?: string;
    };
    InternalError: {
      message: string;
    };
    Message: {
      content: string;
      /** The user or agent ID */
      senderId: string;
      /** Who is sending the message (agent or user) */
      side: string;
    };
    MessageSent: {
      content: string;
      id: string;
      /** The user or agent ID */
      senderId: string;
      sentDate: string;
      /** Who is sending the message (agent or user) */
      side: string;
    };
    Metadata: {
      /** The metadata values saved on agent side */
      agent: { [key: string]: unknown };
      /** The metadata values saved on bot side */
      bot: { [key: string]: unknown };
      /** The metadata values saved on user side */
      user: { [key: string]: unknown };
    };
    Setting: {
      callbackToken: string;
      callbackURL: string;
      integrationFields: { [key: string]: unknown };
      integrationName: string;
    };
    Typing: {
      typing: boolean;
    };
  };
  responses: {};
}

export interface operations {
  sendEnd: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** End conversation object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['End'];
      };
    };
  };
  conversationHistory: {
    parameters: {
      path: {
        /** The Conversation ID */
        conversationId: string;
      };
      query: {
        /** The page number. Default to 1 (Optional) */
        page?: number;
        /** The page size. Default to 10 (Optional) */
        pageSize?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['History'];
        };
      };
    };
  };
  sendMessage: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
        /** Used for don't send duplicate messages. */
        messageId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Message object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['Message'];
      };
    };
  };
  conversationMetadata: {
    parameters: {
      path: {
        /** The Conversation ID */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Metadata'];
        };
      };
    };
  };
  sendTypingIndicator: {
    parameters: {
      path: {
        /** Uniquely identify the chat conversation. */
        conversationId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Typing Indicator object that needs to be sent */
    requestBody: {
      content: {
        'application/json': components['schemas']['Typing'];
      };
    };
  };
  getSettings: {
    parameters: {};
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Setting'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  setSettings: {
    parameters: {};
    responses: {
      /** Successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Setting'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Setting object that needs to be updated */
    requestBody: {
      content: {
        'application/json': components['schemas']['Setting'];
      };
    };
  };
  conversationHistoryV2: {
    parameters: {
      path: {
        /** The Conversation ID */
        conversationId: string;
      };
      query: {
        /** The page number. Default to 1 (Optional) */
        page?: number;
        /** The page size. Default to 10 (Optional) */
        pageSize?: number;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HistoryV2'];
        };
      };
    };
  };
  listIntegrations: {
    parameters: {};
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['IntegrationList'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  createIntegration: {
    parameters: {};
    responses: {
      /** Successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Integration'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Integration object that needs to be created */
    requestBody: {
      content: {
        'application/json': components['schemas']['IntegrationCreate'];
      };
    };
  };
  getIntegration: {
    parameters: {
      path: {
        /** The Integration ID */
        integrationId: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['IntegrationList'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  updateIntegration: {
    parameters: {
      path: {
        /** The Integration ID */
        integrationId: string;
      };
    };
    responses: {
      /** Successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Integration'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Integration object that needs to be updated */
    requestBody: {
      content: {
        'application/json': components['schemas']['IntegrationCreate'];
      };
    };
  };
  deleteIntegration: {
    parameters: {
      path: {
        /** The Integration ID */
        integrationId: string;
      };
    };
    responses: {
      /** Successful operation */
      204: never;
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
  };
  patchIntegration: {
    parameters: {
      path: {
        /** The Integration ID */
        integrationId: string;
      };
    };
    responses: {
      /** Successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Integration'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequest'];
        };
      };
      /** Internal Error */
      500: {
        content: {
          'application/json': components['schemas']['InternalError'];
        };
      };
    };
    /** Integration object that needs to be patched */
    requestBody: {
      content: {
        'application/json': components['schemas']['IntegrationPatch'];
      };
    };
  };
}

export interface external {}

/* eslint-enable */
